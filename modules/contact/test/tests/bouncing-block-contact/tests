# An explanation and results for the full runs of these inputs files are given in the contact documentation

[Tests]
  design = 'Constraints/index.md'
  issues = '#13080 #14454'
  [frictionless-nodal-min-lm-mortar-disp-coarse]
    type = 'Exodiff'
    input = 'frictionless-nodal-min-lm-mortar-disp.i'
    exodiff = 'frictionless-nodal-min-lm-mortar-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictionless bouncing block problem with nodal constraint enforcement, mortar application of forces, and min NCP function'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active=''"
    allow_test_objects = true
  []
  [frictionless-nodal-fb-lm-mortar-disp-coarse]
    type = 'Exodiff'
    input = 'frictionless-nodal-fb-lm-mortar-disp.i'
    exodiff = 'frictionless-nodal-fb-lm-mortar-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictionless bouncing block problem with nodal constraint enforcement, mortar application of forces, and fb NCP function'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active=''"
    allow_test_objects = true
  []
  [frictionless-nodal-min-lm-nodal-disp-coarse]
    type = 'Exodiff'
    input = 'frictionless-nodal-min-lm-nodal-disp.i'
    exodiff = 'frictionless-nodal-min-lm-nodal-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictionless bouncing block problem with nodal constraint enforcement, nodal application of forces, and min NCP function'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active=''"
    allow_test_objects = true
  []
  [frictionless-nodal-fb-lm-nodal-disp-coarse]
    type = 'Exodiff'
    input = 'frictionless-nodal-fb-lm-nodal-disp.i'
    exodiff = 'frictionless-nodal-fb-lm-nodal-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictionless bouncing block problem with nodal constraint enforcement, nodal application of forces, and fb NCP function'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active=''"
    allow_test_objects = true
  []
  [frictionless-mortar-min-lm-mortar-disp-coarse]
    allow_test_objects = true
    type = 'Exodiff'
    input = 'frictionless-mortar-min-lm-mortar-disp.i'
    exodiff = 'frictionless-mortar-min-lm-mortar-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictionless bouncing block problem with mortar constraint enforcement, mortar application of forces, and min NCP function'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active=''"
  []
  [frictionless-mortar-fb-lm-mortar-disp-coarse]
    type = 'Exodiff'
    input = 'frictionless-mortar-fb-lm-mortar-disp.i'
    exodiff = 'frictionless-mortar-fb-lm-mortar-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictionless bouncing block problem with mortar constraint enforcement, mortar application of forces, and fb NCP function'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active=''"
    allow_test_objects = true
  []
  [frictional-mortar-min-lm-mortar-disp-coarse]
    type = 'Exodiff'
    input = 'frictional-mortar-min-lm-mortar-disp.i'
    exodiff = 'frictional-mortar-min-lm-mortar-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictional bouncing block problem with mortar constraint enforcement, mortar application of forces, and min NCP function'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active=''"
    max_parallel = 1
    allow_test_objects = true
    abs_zero = 1e-9
  []
  [frictional-mortar-fb-lm-mortar-disp-coarse]
    type = 'Exodiff'
    input = 'frictional-mortar-fb-lm-mortar-disp.i'
    exodiff = 'frictional-mortar-fb-lm-mortar-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictional bouncing block problem with mortar constraint enforcement, mortar application of forces, and fb NCP function'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active=''"
    allow_test_objects = true
  []
  [frictional-nodal-min-lm-mortar-disp-coarse]
    type = 'Exodiff'
    input = 'frictional-nodal-min-lm-mortar-disp.i'
    exodiff = 'frictional-nodal-min-lm-mortar-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictional bouncing block problem with nodal constraint enforcement, mortar application of forces, and min NCP function'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active='' Outputs/exodus/sync_only=true --redirect-output output.log"
    allow_warnings = True
    max_parallel = 1
    method = 'OPT'
    allow_test_objects = true
    abs_zero = 1e-8
  []
  [frictional-nodal-min-normal-lm-mortar-fb-tangential-lm-mortar-disp-coarse]
    type = 'Exodiff'
    input = 'frictional-nodal-min-normal-lm-mortar-fb-tangential-lm-mortar-disp.i'
    exodiff = 'frictional-nodal-min-normal-lm-mortar-fb-tangential-lm-mortar-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictional bouncing block problem with nodal constraint enforcment for the normal LM using min NCP, mortar constraint enforcement of the tangential LM with fb, and mortar application of forces'
    cli_args = "Executioner/end_time=50 Postprocessors/active=''"
    allow_test_objects = true
  []
  [frictional-nodal-min-normal-lm-mortar-fb-tangential-lm-mortar-action]
    type = 'Exodiff'
    input = 'frictional-nodal-min-normal-lm-mortar-fb-tangential-lm-mortar-action.i'
    exodiff = 'frictional-nodal-min-normal-lm-mortar-fb-tangential-lm-mortar-action_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictional bouncing block problem with nodal constraint enforcment for the normal LM using min NCP, mortar constraint enforcement of the tangential LM with fb, and mortar application of forces using the ContactAction. The result shall be identical to that obtained by directly specifying individual objects.'
    cli_args = "Executioner/end_time=50 Postprocessors/active=''"
  []
  [reduced_active_set]
    requirement = 'The system shall be able to solve frictionless mechanical contact using a reduced active nonlinear function set scheme (RANFS) in conjunction with a node-face geometric discretization. The RANFS scheme shall be'
    [ranfs-project-svd]
      type = 'Exodiff'
      input = 'frictionless-nodal-reduced-active-set.i'
      exodiff = 'ranfs-project-svd.e'
      absent_out = '[1-9]+[0-9]* of 16 singular values'
      expect_out = '0 of 16 singular values'
      detail = 'nonsingular both with bounds projection and'
      cli_args = 'Outputs/file_base=ranfs-project-svd -pc_type svd -pc_svd_monitor'
    []
    [ranfs-dont-project-svd]
      type = 'Exodiff'
      input = 'frictionless-nodal-reduced-active-set.i'
      exodiff = 'ranfs-dont-project-svd.e'
      detail = 'without bounds projection and be'
      cli_args = 'Outputs/file_base=ranfs-dont-project-svd Executioner/line_search=none -pc_type svd -pc_svd_monitor'
    []
    [ranfs-project-amg]
      type = 'Exodiff'
      input = 'frictionless-nodal-reduced-active-set.i'
      exodiff = 'ranfs-project-amg.e'
      detail = 'solvable with amg both with bounds projection'
      cli_args = 'Outputs/file_base=ranfs-project-amg'
      expect_out = '[bB][oO][oO][mM][eE][rR][aA][mM][gG]'
    []
    [ranfs-dont-project-amg]
      type = 'Exodiff'
      input = 'frictionless-nodal-reduced-active-set.i'
      exodiff = 'ranfs-dont-project-amg.e'
      detail = 'and without bounds projection.'
      cli_args = 'Outputs/file_base=ranfs-dont-project-amg Executioner/line_search=none'
      expect_out = '[bB][oO][oO][mM][eE][rR][aA][mM][gG]'
    []
    [ranfs-jacobian]
      type = 'PetscJacobianTester'
      input = 'frictionless-nodal-reduced-active-set.i'
      difference_tol = 1e-7
      cli_args = "Outputs/active='' Executioner/line_search=none"
      expect_out = '[bB][oO][oO][mM][eE][rR][aA][mM][gG]'
      detail = "The system's RANFS scheme shall have a perfect Jacobian for mechanical contact that only has one non-zero normal component"
    []
    [full-bouncing-block]
      type = 'Exodiff'
      input = 'bouncing-block-ranfs.i'
      exodiff = 'bouncing-block-ranfs_exo.e'
      detail = 'The system shall be able to detect when a secondary node is ping-ponging back and forth between different primary faces and consequently tie the locations of the secondary and corresponding primary node using Lagrange Multipliers corresponding to equality constraints, e.g. more RANFS'
      cli_args = "Postprocessors/active=''"
      custom_cmp = 'bouncing-block-ranfs.cmp'
      heavy = true
    []
    [bouncing-block]
      type = 'Exodiff'
      input = 'bouncing-block-ranfs.i'
      exodiff = 'bouncing-block-coarse.e'
      abs_zero = 1e-9
      detail = 'The system shall be able to solve a smaller model of the full ping-ponging problem'
      cli_args = "Postprocessors/active='' Mesh/file=long-bottom-block-no-lower-d-coarse.e Executioner/end_time=100 Outputs/file_base=bouncing-block-coarse"
    []
  []
  [tied_node]
    requirement = 'Using a RANFS scheme with Lagrange multipliers corresponding to equality constraints the system shall be able to '
    [physics]
      type = 'Exodiff'
      input = tied-nodes.i
      exodiff = 'tied-nodes_exo.e'
      absent_out = '[1-9]+[0-9]* of 16 singular values'
      expect_out = '0 of 16 singular values'
      detail = 'tie nodes together and'
      allow_test_objects = True
      cli_args = '-pc_type svd -pc_svd_monitor'
    []
    [jac]
      type = 'PetscJacobianTester'
      input = tied-nodes.i
      cli_args = "Outputs/active=''"
      detail = 'have a perfect Jacobian'
      allow_test_objects = True
    []
  []
  [weighted_gap]
    requirement = 'The system shall support a variationally consistent weighted gap implementation of the zero-penetration contact constraint'
    issues = '#16961'
    [equal_order]
      type = 'Exodiff'
      input = frictionless-weighted-gap.i
      exodiff = 'frictionless-weighted-gap_out.e'
      detail = 'using equal, first order bases for displacements and the lagrange multiplier'
      cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active=''"
    []
    [mixed_order]
      type = 'Exodiff'
      input = frictionless-weighted-gap-mixed-basis.i
      exodiff = 'frictionless-weighted-gap-mixed-basis_out.e'
      detail = 'using a second order basis for displacements and a first order basis for the lagrange multiplier'
      cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active=''"
      ad_mode = 'sparse'
    []
  []
[]
